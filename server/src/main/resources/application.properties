# ================================
# Server
# ================================
# Port lu depuis l'env (SERVER_PORT), défaut 8081
server.port=${SERVER_PORT:8081}

# ================================
# Datasource (PostgreSQL)
# ================================
# En Docker Compose, l'hôte de la DB est "db"
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://db:5432/mpmt}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}

# ================================
# JPA / Hibernate
# ================================
# Pour le dev/démo : recrée le schéma à chaque démarrage.
# En environnement réel, préfère "update" ou gère tes migrations via Flyway/Liquibase.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ================================
# Initialisation SQL
# ================================
# Active le chargement des scripts schema.sql / data.sql s'ils existent
spring.sql.init.mode=always
spring.sql.init.platform=postgres

# ================================
# Actuator / Health
# ================================
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# ================================
# CORS (pour appels depuis le front sur http://localhost:8080)
# ================================
# Si ton front appelle l'API via http://localhost:8081, ces règles évitent les erreurs CORS.
spring.web.cors.allowed-origins=http://localhost:8080
spring.web.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# ================================
# Logs (optionnel)
# ================================
# logging.level.org.springframework=INFO
# logging.level.your.package=DEBUG
logging.level.org.springframework.security=DEBUG

# ================================
# Mail (paramétré via variables d'env)
# - En dev MailHog: SPRING_MAIL_HOST=mailhog, SPRING_MAIL_PORT=1025, AUTH=false, STARTTLS=false
# - En dev SendGrid: SPRING_MAIL_HOST=smtp.sendgrid.net, PORT=587, USERNAME=apikey, PASSWORD=$SENDGRID_API_KEY, AUTH=true, STARTTLS=true
# ================================
spring.mail.host=${SPRING_MAIL_HOST:localhost}
spring.mail.port=${SPRING_MAIL_PORT:1025}
spring.mail.username=${SPRING_MAIL_USERNAME:}
spring.mail.password=${SPRING_MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:false}

# ================================
# Frontend URL (utilisée dans les e-mails)
# ================================
app.frontend.base-url=${APP_FRONTEND_BASE_URL:http://localhost:8080}

# ================================
# Adresse expéditeur (ex: Single Sender SendGrid)
# ================================
app.mail.from=${APP_MAIL_FROM:}
