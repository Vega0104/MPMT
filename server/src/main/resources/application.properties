# ================================
# Server
# ================================
# Port lu depuis l'env (SERVER_PORT), défaut 8081
server.port=${SERVER_PORT:8081}

# ================================
# Datasource (PostgreSQL)
# ================================
# En Docker Compose, l'hôte de la DB est "db"
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://db:5432/mpmt}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:postgres}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:postgres}

# ================================
# JPA / Hibernate
# ================================
# Pour le dev/démo : recrée le schéma à chaque démarrage.
# En environnement réel, préfère "update" ou gérer tes migrations via Flyway/Liquibase.
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ================================
# Initialisation SQL
# ================================
# Active le chargement des scripts schema.sql / data.sql s'ils existent
spring.sql.init.mode=always
spring.sql.init.platform=postgres

# ================================
# Actuator / Health
# ================================
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true
management.health.livenessstate.enabled=true
management.health.readinessstate.enabled=true

# ================================
# CORS (pour appels depuis le front sur http://localhost:8080)
# ================================
# Si ton front appelle l'API via http://localhost:8081, ces règles évitent les erreurs CORS.
spring.web.cors.allowed-origins=http://localhost:8080
spring.web.cors.allowed-methods=GET,POST,PUT,PATCH,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true

# ================================
# Logs (optionnel)
# ================================
# logging.level.org.springframework=INFO
# logging.level.your.package=DEBUG
